"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _path = _interopRequireDefault(require("path"));
var _treeKill = _interopRequireDefault(require("tree-kill"));
var _chokidar = _interopRequireDefault(require("chokidar"));
var _child_process = require("child_process");
var _config = require("../config");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const { baseDir } = _config.config;
let host = 'localhost:3000';
let clearNodemon = () => Promise.resolve();
const delay = (timer, callback) => {
  let _delay = null;
  return () => !_delay && (_delay = setTimeout(() => callback().then(() => {
    _delay = null;
  }), timer));
};

const stdioPipe = (cp, pro) => {
  const stdio = fnName => (callback) =>
  cp[fnName].on('data', (data) =>
  pro[fnName].write(callback ? callback(data) || data : data));


  return {
    stdout: stdio('stdout'),
    stderr: stdio('stderr') };

};

function startServer() {
  const cp = (0, _child_process.spawn)('sh', ['-c', 'babel-node src/index.ts --extensions \'.ts,.tsx\''], {
    env: Object.assign({}, process.env, {
      PATH: `${baseDir}/node_modules/.bin:${process.env.PATH}` }) });


  const killCp = () => {
    _stdion = null;
    return new Promise((resolve, reject) => {
      (0, _treeKill.default)(cp.pid, err => err ? reject(err) : resolve());
    });
  };
  let _stdion = stdioPipe(cp, process);;
  _stdion.stderr();
  return new Promise((_resolve) =>
  _stdion.stdout(data => {
    console.log(data);
    const match = data.toString('utf-8').match(/http:\/\/(.*?)\//);
    if (match && match[1]) {
      host = match[1];
      _resolve(killCp);
    }
  }));

}

async function runNodemon() {
  let nodemonExa = await startServer();
  const watch = _chokidar.default.watch([_path.default.join(baseDir, 'src/index.ts')], {});
  watch.on('change', delay(100, () => nodemonExa().
  then(startServer).
  then(exa => exa && (nodemonExa = exa))));
  return async () => nodemonExa().then(() => {
    watch.close();
  });
}

process.on('exit', () => clearNodemon());var _default =

async app => clearNodemon().then(() => clearNodemon = runNodemon()).then(() => host);exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3Rvb2xzL2xpYi9ub2RlbW9uLnNlcnZlci50cyJdLCJuYW1lcyI6WyJiYXNlRGlyIiwiY29uZmlnIiwiaG9zdCIsImNsZWFyTm9kZW1vbiIsIlByb21pc2UiLCJyZXNvbHZlIiwiZGVsYXkiLCJ0aW1lciIsImNhbGxiYWNrIiwiX2RlbGF5Iiwic2V0VGltZW91dCIsInRoZW4iLCJzdGRpb1BpcGUiLCJjcCIsInBybyIsInN0ZGlvIiwiZm5OYW1lIiwib24iLCJkYXRhIiwid3JpdGUiLCJzdGRvdXQiLCJzdGRlcnIiLCJzdGFydFNlcnZlciIsImVudiIsIk9iamVjdCIsImFzc2lnbiIsInByb2Nlc3MiLCJQQVRIIiwia2lsbENwIiwiX3N0ZGlvbiIsInJlamVjdCIsInBpZCIsImVyciIsIl9yZXNvbHZlIiwiY29uc29sZSIsImxvZyIsIm1hdGNoIiwidG9TdHJpbmciLCJydW5Ob2RlbW9uIiwibm9kZW1vbkV4YSIsIndhdGNoIiwiY2hva2lkYXIiLCJwYXRoIiwiam9pbiIsImV4YSIsImNsb3NlIiwiYXBwIl0sIm1hcHBpbmdzIjoib0dBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQzs7QUFFQSxNQUFNLEVBQUVBLE9BQUYsS0FBY0MsY0FBcEI7QUFDQSxJQUFJQyxJQUFxQixHQUFHLGdCQUE1QjtBQUNBLElBQUlDLFlBQWlCLEdBQUcsTUFBTUMsT0FBTyxDQUFDQyxPQUFSLEVBQTlCO0FBQ0EsTUFBTUMsS0FBSyxHQUFHLENBQUNDLEtBQUQsRUFBZ0JDLFFBQWhCLEtBQXVDO0FBQ25ELE1BQUlDLE1BQVcsR0FBRyxJQUFsQjtBQUNBLFNBQU8sTUFBTSxDQUFDQSxNQUFELEtBQVlBLE1BQU0sR0FBR0MsVUFBVSxDQUFDLE1BQU1GLFFBQVEsR0FBR0csSUFBWCxDQUFnQixNQUFNO0FBQ3ZFRixJQUFBQSxNQUFNLEdBQUcsSUFBVDtBQUNELEdBRmtELENBQVAsRUFFeENGLEtBRndDLENBQS9CLENBQWI7QUFHRCxDQUxEOztBQU9BLE1BQU1LLFNBQVMs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R0FGK0IsQ0FBaEM7QUFHRDs7QUFFRG5CLE9BQU8sQ0FBQ1QsRUFBUixDQUFXLE1BQVgsRUFBbUIsTUFBTWQsWUFBWSxFQUFyQyxFOztBQUVlLE1BQU8yQyxHQUFQLElBQXFCM0MsWUFBWSxHQUFHUSxJQUFmLENBQW9CLE1BQU1SLFlBQVksR0FBR21DLFVBQVUsRUFBbkQsRUFBdUQzQixJQUF2RCxDQUE0RCxNQUFNVCxJQUFsRSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQga2lsbCBmcm9tICd0cmVlLWtpbGwnO1xuaW1wb3J0IGNob2tpZGFyIGZyb20gJ2Nob2tpZGFyJztcbmltcG9ydCB7IHNwYXduIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuXG5jb25zdCB7IGJhc2VEaXIgfSA9IGNvbmZpZztcbmxldCBob3N0OiBudW1iZXIgfCBzdHJpbmcgPSAnbG9jYWxob3N0OjMwMDAnO1xubGV0IGNsZWFyTm9kZW1vbjogYW55ID0gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCk7XG5jb25zdCBkZWxheSA9ICh0aW1lcjogbnVtYmVyLCBjYWxsYmFjazogYW55KTogYW55ID0+IHtcbiAgbGV0IF9kZWxheTogYW55ID0gbnVsbDtcbiAgcmV0dXJuICgpID0+ICFfZGVsYXkgJiYgKF9kZWxheSA9IHNldFRpbWVvdXQoKCkgPT4gY2FsbGJhY2soKS50aGVuKCgpID0+IHtcbiAgICBfZGVsYXkgPSBudWxsO1xuICB9KSwgdGltZXIpKTtcbn1cblxuY29uc3Qgc3RkaW9QaXBlID0gKGNwOiBhbnksIHBybzogYW55KTogYW55ID0+IHtcbiAgY29uc3Qgc3RkaW8gPSAoZm5OYW1lOiBzdHJpbmcpID0+IChjYWxsYmFjaz86IGFueSkgPT5cbiAgICBjcFtmbk5hbWVdLm9uKCdkYXRhJywgKGRhdGE6IEJ1ZmZlcikgPT5cbiAgICAgIHByb1tmbk5hbWVdLndyaXRlKGNhbGxiYWNrID8gY2FsbGJhY2soZGF0YSkgfHwgZGF0YSA6IGRhdGEpXG4gICAgKTtcblxuICByZXR1cm4ge1xuICAgIHN0ZG91dDogc3RkaW8oJ3N0ZG91dCcpLFxuICAgIHN0ZGVycjogc3RkaW8oJ3N0ZGVycicpLFxuICB9O1xufTtcblxuZnVuY3Rpb24gc3RhcnRTZXJ2ZXIoKTogUHJvbWlzZTxhbnk+IHtcbiAgY29uc3QgY3AgPSBzcGF3bignc2gnLCBbJy1jJywgJ2JhYmVsLW5vZGUgc3JjL2luZGV4LnRzIC0tZXh0ZW5zaW9ucyBcXCcudHMsLnRzeFxcJyddLCB7XG4gICAgZW52OiBPYmplY3QuYXNzaWduKHt9LCBwcm9jZXNzLmVudiwge1xuICAgICAgUEFUSDogYCR7YmFzZURpcn0vbm9kZV9tb2R1bGVzLy5iaW46JHtwcm9jZXNzLmVudi5QQVRIfWBcbiAgICB9KSxcbiAgfSk7XG4gIGNvbnN0IGtpbGxDcCA9ICgpOiBQcm9taXNlPGFueT4gPT4ge1xuICAgIF9zdGRpb24gPSBudWxsO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBraWxsKGNwLnBpZCwgKGVycikgPT4gZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCkpO1xuICAgIH0pO1xuICB9XG4gIGxldCBfc3RkaW9uOiBhbnkgPSBzdGRpb1BpcGUoY3AsIHByb2Nlc3MpOztcbiAgX3N0ZGlvbi5zdGRlcnIoKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChfcmVzb2x2ZSkgPT4gXG4gICAgX3N0ZGlvbi5zdGRvdXQoKGRhdGE6IEJ1ZmZlcikgPT4ge1xuICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgICBjb25zdCBtYXRjaCA9IGRhdGEudG9TdHJpbmcoJ3V0Zi04JykubWF0Y2goL2h0dHA6XFwvXFwvKC4qPylcXC8vKTtcbiAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xuICAgICAgICBob3N0ID0gbWF0Y2hbMV07XG4gICAgICAgIF9yZXNvbHZlKGtpbGxDcCk7XG4gICAgICB9XG4gICAgfSlcbiAgKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuTm9kZW1vbigpOiBQcm9taXNlPGFueT4ge1xuICBsZXQgbm9kZW1vbkV4YSA9IGF3YWl0IHN0YXJ0U2VydmVyKCk7XG4gIGNvbnN0IHdhdGNoID0gY2hva2lkYXIud2F0Y2goW3BhdGguam9pbihiYXNlRGlyLCAnc3JjL2luZGV4LnRzJyldLCB7fSk7XG4gIHdhdGNoLm9uKCdjaGFuZ2UnLCBkZWxheSgxMDAsICgpID0+IG5vZGVtb25FeGEoKVxuICAgIC50aGVuKHN0YXJ0U2VydmVyKVxuICAgIC50aGVuKChleGE6IGFueSkgPT4gZXhhICYmIChub2RlbW9uRXhhID0gZXhhKSkpKTtcbiAgcmV0dXJuIGFzeW5jICgpOlByb21pc2U8YW55PiA9PiBub2RlbW9uRXhhKCkudGhlbigoKSA9PiB7XG4gICAgd2F0Y2guY2xvc2UoKTtcbiAgfSk7XG59XG5cbnByb2Nlc3Mub24oJ2V4aXQnLCAoKSA9PiBjbGVhck5vZGVtb24oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChhcHA/OiBhbnkpID0+IGNsZWFyTm9kZW1vbigpLnRoZW4oKCkgPT4gY2xlYXJOb2RlbW9uID0gcnVuTm9kZW1vbigpKS50aGVuKCgpID0+IGhvc3QpO1xuIl19