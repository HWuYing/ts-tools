"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _path = _interopRequireDefault(require("path"));
var _treeKill = _interopRequireDefault(require("tree-kill"));
var _chokidar = _interopRequireDefault(require("chokidar"));
var _child_process = require("child_process");
var _config = require("../config");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const { baseDir } = _config.config;
let host = 'localhost:3000';
let clearNodemon = () => Promise.resolve();
const delay = (timer, callback) => {
  let _delay = null;
  return () => !_delay && (_delay = setTimeout(() => callback().then(() => {
    _delay = null;
  }), timer));
};

const stdioPipe = (cp, pro) => {
  const stdio = fnName => (callback) =>
  cp[fnName].on('data', (data) =>
  pro[fnName].write(callback ? callback(data) || data : data));


  return {
    stdout: stdio('stdout'),
    stderr: stdio('stderr') };

};

function startServer() {
  const cp = (0, _child_process.spawn)('sh', ['-c', 'babel-node src/index.ts --extensions \'.ts,.tsx\''], {
    env: Object.assign({}, process.env, {
      PATH: `${baseDir}/node_modules/.bin:${process.env.PATH}` }) });


  const killCp = () => {
    _stdion = null;
    return new Promise((resolve, reject) => {
      (0, _treeKill.default)(cp.pid, err => err ? reject(err) : resolve());
    });
  };
  let _stdion = stdioPipe(cp, process);;
  _stdion.stderr();
  return new Promise((_resolve) =>
  _stdion.stdout(data => {
    const match = data.toString('utf-8').match(/http:\/\/(.*?)\//);
    if (match && match[1]) {
      host = match[1];
      _resolve(killCp);
    }
  }));

}

async function runNodemon() {
  let nodemonExa = await startServer();
  const watch = _chokidar.default.watch([_path.default.join(baseDir, 'src/index.ts')], {});
  watch.on('change', delay(100, () => nodemonExa().
  then(startServer).
  then(exa => exa && (nodemonExa = exa))));
  return async () => nodemonExa().then(() => {
    watch.close();
  });
}

process.on('exit', () => clearNodemon());var _default =

async app => clearNodemon().then(() => clearNodemon = runNodemon()).then(() => host);exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3Rvb2xzL2xpYi9ub2RlbW9uLnNlcnZlci50cyJdLCJuYW1lcyI6WyJiYXNlRGlyIiwiY29uZmlnIiwiaG9zdCIsImNsZWFyTm9kZW1vbiIsIlByb21pc2UiLCJyZXNvbHZlIiwiZGVsYXkiLCJ0aW1lciIsImNhbGxiYWNrIiwiX2RlbGF5Iiwic2V0VGltZW91dCIsInRoZW4iLCJzdGRpb1BpcGUiLCJjcCIsInBybyIsInN0ZGlvIiwiZm5OYW1lIiwib24iLCJkYXRhIiwid3JpdGUiLCJzdGRvdXQiLCJzdGRlcnIiLCJzdGFydFNlcnZlciIsImVudiIsIk9iamVjdCIsImFzc2lnbiIsInByb2Nlc3MiLCJQQVRIIiwia2lsbENwIiwiX3N0ZGlvbiIsInJlamVjdCIsInBpZCIsImVyciIsIl9yZXNvbHZlIiwibWF0Y2giLCJ0b1N0cmluZyIsInJ1bk5vZGVtb24iLCJub2RlbW9uRXhhIiwid2F0Y2giLCJjaG9raWRhciIsInBhdGgiLCJqb2luIiwiZXhhIiwiY2xvc2UiLCJhcHAiXSwibWFwcGluZ3MiOiJvR0FBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DOztBQUVBLE1BQU0sRUFBRUEsT0FBRixLQUFjQyxjQUFwQjtBQUNBLElBQUlDLElBQXFCLEdBQUcsZ0JBQTVCO0FBQ0EsSUFBSUMsWUFBaUIsR0FBRyxNQUFNQyxPQUFPLENBQUNDLE9BQVIsRUFBOUI7QUFDQSxNQUFNQyxLQUFLLEdBQUcsQ0FBQ0MsS0FBRCxFQUFnQkMsUUFBaEIsS0FBdUM7QUFDbkQsTUFBSUMsTUFBVyxHQUFHLElBQWxCO0FBQ0EsU0FBTyxNQUFNLENBQUNBLE1BQUQsS0FBWUEsTUFBTSxHQUFHQyxVQUFVLENBQUMsTUFBTUYsUUFBUSxHQUFHRyxJQUFYLENBQWdCLE1BQU07QUFDdkVGLElBQUFBLE1BQU0sR0FBRyxJQUFUO0FBQ0QsR0FGa0QsQ0FBUCxFQUV4Q0YsS0FGd0MsQ0FBL0IsQ0FBYjtBQUdELENBTEQ7O0FBT0EsTUFBTUssU0FBUyxHQUFHLENBQUNDLEVBQUQs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QUFNZCxZQUFZLEVBQXJDLEU7O0FBRWUsTUFBT3lDLEdBQVAsSUFBcUJ6QyxZQUFZLEdBQUdRLElBQWYsQ0FBb0IsTUFBTVIsWUFBWSxHQUFHaUMsVUFBVSxFQUFuRCxFQUF1RHpCLElBQXZELENBQTRELE1BQU1ULElBQWxFLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBraWxsIGZyb20gJ3RyZWUta2lsbCc7XG5pbXBvcnQgY2hva2lkYXIgZnJvbSAnY2hva2lkYXInO1xuaW1wb3J0IHsgc3Bhd24gfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5cbmNvbnN0IHsgYmFzZURpciB9ID0gY29uZmlnO1xubGV0IGhvc3Q6IG51bWJlciB8IHN0cmluZyA9ICdsb2NhbGhvc3Q6MzAwMCc7XG5sZXQgY2xlYXJOb2RlbW9uOiBhbnkgPSAoKSA9PiBQcm9taXNlLnJlc29sdmUoKTtcbmNvbnN0IGRlbGF5ID0gKHRpbWVyOiBudW1iZXIsIGNhbGxiYWNrOiBhbnkpOiBhbnkgPT4ge1xuICBsZXQgX2RlbGF5OiBhbnkgPSBudWxsO1xuICByZXR1cm4gKCkgPT4gIV9kZWxheSAmJiAoX2RlbGF5ID0gc2V0VGltZW91dCgoKSA9PiBjYWxsYmFjaygpLnRoZW4oKCkgPT4ge1xuICAgIF9kZWxheSA9IG51bGw7XG4gIH0pLCB0aW1lcikpO1xufVxuXG5jb25zdCBzdGRpb1BpcGUgPSAoY3A6IGFueSwgcHJvOiBhbnkpOiBhbnkgPT4ge1xuICBjb25zdCBzdGRpbyA9IChmbk5hbWU6IHN0cmluZykgPT4gKGNhbGxiYWNrPzogYW55KSA9PlxuICAgIGNwW2ZuTmFtZV0ub24oJ2RhdGEnLCAoZGF0YTogQnVmZmVyKSA9PlxuICAgICAgcHJvW2ZuTmFtZV0ud3JpdGUoY2FsbGJhY2sgPyBjYWxsYmFjayhkYXRhKSB8fCBkYXRhIDogZGF0YSlcbiAgICApO1xuXG4gIHJldHVybiB7XG4gICAgc3Rkb3V0OiBzdGRpbygnc3Rkb3V0JyksXG4gICAgc3RkZXJyOiBzdGRpbygnc3RkZXJyJyksXG4gIH07XG59O1xuXG5mdW5jdGlvbiBzdGFydFNlcnZlcigpOiBQcm9taXNlPGFueT4ge1xuICBjb25zdCBjcCA9IHNwYXduKCdzaCcsIFsnLWMnLCAnYmFiZWwtbm9kZSBzcmMvaW5kZXgudHMgLS1leHRlbnNpb25zIFxcJy50cywudHN4XFwnJ10sIHtcbiAgICBlbnY6IE9iamVjdC5hc3NpZ24oe30sIHByb2Nlc3MuZW52LCB7XG4gICAgICBQQVRIOiBgJHtiYXNlRGlyfS9ub2RlX21vZHVsZXMvLmJpbjoke3Byb2Nlc3MuZW52LlBBVEh9YFxuICAgIH0pLFxuICB9KTtcbiAgY29uc3Qga2lsbENwID0gKCk6IFByb21pc2U8YW55PiA9PiB7XG4gICAgX3N0ZGlvbiA9IG51bGw7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGtpbGwoY3AucGlkLCAoZXJyKSA9PiBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoKSk7XG4gICAgfSk7XG4gIH1cbiAgbGV0IF9zdGRpb246IGFueSA9IHN0ZGlvUGlwZShjcCwgcHJvY2Vzcyk7O1xuICBfc3RkaW9uLnN0ZGVycigpO1xuICByZXR1cm4gbmV3IFByb21pc2UoKF9yZXNvbHZlKSA9PiBcbiAgICBfc3RkaW9uLnN0ZG91dCgoZGF0YTogQnVmZmVyKSA9PiB7XG4gICAgICBjb25zdCBtYXRjaCA9IGRhdGEudG9TdHJpbmcoJ3V0Zi04JykubWF0Y2goL2h0dHA6XFwvXFwvKC4qPylcXC8vKTtcbiAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xuICAgICAgICBob3N0ID0gbWF0Y2hbMV07XG4gICAgICAgIF9yZXNvbHZlKGtpbGxDcCk7XG4gICAgICB9XG4gICAgfSlcbiAgKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuTm9kZW1vbigpOiBQcm9taXNlPGFueT4ge1xuICBsZXQgbm9kZW1vbkV4YSA9IGF3YWl0IHN0YXJ0U2VydmVyKCk7XG4gIGNvbnN0IHdhdGNoID0gY2hva2lkYXIud2F0Y2goW3BhdGguam9pbihiYXNlRGlyLCAnc3JjL2luZGV4LnRzJyldLCB7fSk7XG4gIHdhdGNoLm9uKCdjaGFuZ2UnLCBkZWxheSgxMDAsICgpID0+IG5vZGVtb25FeGEoKVxuICAgIC50aGVuKHN0YXJ0U2VydmVyKVxuICAgIC50aGVuKChleGE6IGFueSkgPT4gZXhhICYmIChub2RlbW9uRXhhID0gZXhhKSkpKTtcbiAgcmV0dXJuIGFzeW5jICgpOlByb21pc2U8YW55PiA9PiBub2RlbW9uRXhhKCkudGhlbigoKSA9PiB7XG4gICAgd2F0Y2guY2xvc2UoKTtcbiAgfSk7XG59XG5cbnByb2Nlc3Mub24oJ2V4aXQnLCAoKSA9PiBjbGVhck5vZGVtb24oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChhcHA/OiBhbnkpID0+IGNsZWFyTm9kZW1vbigpLnRoZW4oKCkgPT4gY2xlYXJOb2RlbW9uID0gcnVuTm9kZW1vbigpKS50aGVuKCgpID0+IGhvc3QpO1xuIl19