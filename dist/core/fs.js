"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.requireSync = exports.writeFile = exports.mkdir = exports.cleanDir = exports.exists = void 0;var _rimraf = _interopRequireDefault(require("rimraf"));
var _fs = require("fs");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}


const exists = path => {
  return Promise.resolve((0, _fs.existsSync)(path));
};exports.exists = exists;

const cleanDir = async (path, options = {}) => new Promise((resolve, reject) => {
  if (!(0, _fs.existsSync)(path)) {
    return resolve();
  }
  (0, _rimraf.default)(path, { glob: options }, err => {
    if (err) {
      return reject(err);
    }
    resolve();
  });
});exports.cleanDir = cleanDir;

const mkdir = async (path, options = {}) => cleanDir(path).then(() => {
  return new Promise((resolve, reject) => {
    (0, _fs.mkdir)(path, Object.assign({ recursive: true }, options), err => {
      if (err) {
        return reject(err);
      }
      resolve();
    });
  });
});exports.mkdir = mkdir;


const writeFile = async (path, data, options = {}) => {
  let _code = data;
  if (data instanceof String) {
    _code = new Buffer(data);
  }
  return new Promise((resolve, reject) => {
    (0, _fs.writeFile)(path, _code, Object.assign({ encoding: 'utf-8' }, options), err => {
      if (err) {
        return reject();
      }
      resolve(path);
    });
  });
};exports.writeFile = writeFile;

const requireSync = path => {
  if (!(0, _fs.existsSync)(path)) {
    return;
  }
  const moduleRequire = require(path);
  return moduleRequire;
};exports.requireSync = requireSync;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3Rvb2xzL2NvcmUvZnMudHMiXSwibmFtZXMiOlsiZXhpc3RzIiwicGF0aCIsIlByb21pc2UiLCJyZXNvbHZlIiwiY2xlYW5EaXIiLCJvcHRpb25zIiwicmVqZWN0IiwiZ2xvYiIsImVyciIsIm1rZGlyIiwidGhlbiIsIk9iamVjdCIsImFzc2lnbiIsInJlY3Vyc2l2ZSIsIndyaXRlRmlsZSIsImRhdGEiLCJfY29kZSIsIlN0cmluZyIsIkJ1ZmZlciIsImVuY29kaW5nIiwicmVxdWlyZVN5bmMiLCJtb2R1bGVSZXF1aXJlIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6ImdMQUFBO0FBQ0Esd0I7OztBQUdPLE1BQU1BLE1BQU0sR0FBSUMsSUFBRCxJQUFvQztBQUN4RCxTQUFPQyxPQUFPLENBQUNDLE9BQVIsQ0FBZ0Isb0JBQVdGLElBQVgsQ0FBaEIsQ0FBUDtBQUNELENBRk0sQzs7QUFJQSxNQUFNRyxRQUFRLEdBQUcsT0FBT0gsSUFBUCxFQUFxQkksT0FBWSxHQUFHLEVBQXBDLEtBQStELElBQUlILE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVHLE1BQVYsS0FBcUI7QUFDdEgsTUFBSSxDQUFDLG9CQUFXTCxJQUFYLENBQUwsRUFBdUI7QUFDckIsV0FBT0UsT0FBTyxFQUFkO0FBQ0Q7QUFDRCx1QkFBT0YsSUFBUCxFQUFhLEVBQUVNLElBQUksRUFBRUYsT0FBUixFQUFiLEVBQWtDRyxHQUFELElBQVM7QUFDeEMsUUFBSUEsR0FBSixFQUFTO0FBQ1AsYUFBT0YsTUFBTSxDQUFDRSxHQUFELENBQWI7QUFDRDtBQUNETCxJQUFBQSxPQUFPO0FBQ1IsR0FMRDtBQU1ELENBVnNGLENBQWhGLEM7O0FBWUEsTUFBTU0sS0FBSyxHQUFHLE9BQU9SLElBQVAsRUFBcUJJLE9BQVksR0FBRyxFQUFwQyxLQUF5REQsUUFBUSxDQUFDSCxJQUFELENBQVIsQ0FBZVMsSUFBZixDQUFvQixNQUFNO0FBQ3RHLFNBQU8sSUFBSVIsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUcsTUFBVixLQUFxQjtBQUN0QyxtQkFBU0wsSUFBVCxFQUFlVSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFFQyxTQUFTLEVBQUUsSUFBYixFQUFkLEVBQW1DUixPQUFuQyxDQUFmLEVBQTZERyxHQUFELElBQVM7QUFDbkUsVUFBSUEsR0FBSixFQUFTO0FBQ1AsZUFBT0YsTUFBTSxDQUFDRSxHQUFELENBQWI7QUFDRDtBQUNETCxNQUFBQSxPQUFPO0FBQ1IsS0FMRDtBQU1ELEdBUE0sQ0FBUDtBQVFELENBVDZFLENBQXZFLEM7OztBQVlBLE1BQU1XLFNBQVMsR0FBRyxPQUFPYixJQUFQLEVBQXFCYyxJQUFyQixFQUE0Q1YsT0FBWSxHQUFHLEVBQTNELEtBQW1GO0FBQzFHLE1BQUlXLEtBQUssR0FBR0QsSUFBWjtBQUNBLE1BQUlBLElBQUksWUFBWUUsTUFBcEIsRUFBNEI7QUFDMUJELElBQUFBLEtBQUssR0FBRyxJQUFJRSxNQUFKLENBQVdILElBQVgsQ0FBUjtBQUNEO0FBQ0QsU0FBTyxJQUFJYixPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVRyxNQUFWLEtBQXFCO0FBQ3RDLHVCQUFZTCxJQUFaLEVBQWtCZSxLQUFsQixFQUF5QkwsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBRU8sUUFBUSxFQUFFLE9BQVosRUFBZCxFQUFxQ2QsT0FBckMsQ0FBekIsRUFBeUVHLEdBQUQsSUFBUztBQUMvRSxVQUFHQSxHQUFILEVBQVE7QUFDTixlQUFPRixNQUFNLEVBQWI7QUFDRDtBQUNESCxNQUFBQSxPQUFPLENBQUNGLElBQUQsQ0FBUDtBQUNELEtBTEQ7QUFNRCxHQVBNLENBQVA7QUFRRCxDQWJNLEM7O0FBZUEsTUFBTW1CLFdBQVcsR0FBSW5CLElBQUQsSUFBa0I7QUFDM0MsTUFBSSxDQUFDLG9CQUFXQSxJQUFYLENBQUwsRUFBdUI7QUFDckI7QUFDRDtBQUNELFFBQU1vQixhQUFhLEdBQUdDLE9BQU8sQ0FBQ3JCLElBQUQsQ0FBN0I7QUFDQSxTQUFPb0IsYUFBUDtBQUNELENBTk0sQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByaW1yYWYgZnJvbSAncmltcmFmJztcbmltcG9ydCB7IGV4aXN0c1N5bmMsIG1rZGlyIGFzIGZzTWtrZGlyLCB3cml0ZUZpbGUgYXMgZnNXcml0ZUZpbGUgfSBmcm9tICdmcyc7XG5pbXBvcnQgeyByZWplY3RzIH0gZnJvbSAnYXNzZXJ0JztcblxuZXhwb3J0IGNvbnN0IGV4aXN0cyA9IChwYXRoOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShleGlzdHNTeW5jKHBhdGgpKTtcbn1cblxuZXhwb3J0IGNvbnN0IGNsZWFuRGlyID0gYXN5bmMgKHBhdGg6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBQcm9taXNlPHVuZGVmaW5lZD4gPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICBpZiAoIWV4aXN0c1N5bmMocGF0aCkpIHtcbiAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICB9XG4gIHJpbXJhZihwYXRoLCB7IGdsb2I6IG9wdGlvbnMsIH0sIChlcnIpID0+IHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgfVxuICAgIHJlc29sdmUoKTtcbiAgfSk7XG59KTtcblxuZXhwb3J0IGNvbnN0IG1rZGlyID0gYXN5bmMgKHBhdGg6IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBQcm9taXNlPGFueT4gPT4gY2xlYW5EaXIocGF0aCkudGhlbigoKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZnNNa2tkaXIocGF0aCwgT2JqZWN0LmFzc2lnbih7IHJlY3Vyc2l2ZTogdHJ1ZSB9LCBvcHRpb25zKSwgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cblxuZXhwb3J0IGNvbnN0IHdyaXRlRmlsZSA9IGFzeW5jIChwYXRoOiBzdHJpbmcsIGRhdGE6IEJ1ZmZlciB8IHN0cmluZywgb3B0aW9uczogYW55ID0ge30pOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICBsZXQgX2NvZGUgPSBkYXRhO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIFN0cmluZykge1xuICAgIF9jb2RlID0gbmV3IEJ1ZmZlcihkYXRhIGFzIHN0cmluZyk7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmc1dyaXRlRmlsZShwYXRoLCBfY29kZSwgT2JqZWN0LmFzc2lnbih7IGVuY29kaW5nOiAndXRmLTgnIH0sIG9wdGlvbnMpLCAoZXJyKSA9PiB7XG4gICAgICBpZihlcnIpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdCgpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShwYXRoKTtcbiAgICB9KTtcbiAgfSlcbn07XG5cbmV4cG9ydCBjb25zdCByZXF1aXJlU3luYyA9IChwYXRoOiBzdHJpbmcpID0+IHtcbiAgaWYgKCFleGlzdHNTeW5jKHBhdGgpKSB7XG4gICAgcmV0dXJuIDtcbiAgfVxuICBjb25zdCBtb2R1bGVSZXF1aXJlID0gcmVxdWlyZShwYXRoKTtcbiAgcmV0dXJuIG1vZHVsZVJlcXVpcmU7XG59OyJdfQ==