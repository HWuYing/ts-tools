"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.jsLoader = jsLoader;exports.cssLoader = cssLoader;var _path = _interopRequireDefault(require("path"));
var _extractTextWebpackPlugin = _interopRequireDefault(require("extract-text-webpack-plugin"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const compose = (fx, gx) => (...arg) => fx(gx.apply(undefined, arg));

const factoryUse = (loader, options, mergeOption) => ({
  loader,
  options: Object.assign({}, options, mergeOption || {}) });


const factoryRules = (regExp, options = {}) => use => ({
  test: regExp,
  exclude: options.exclude,
  include: options.include,
  use });


const factoryLoaders = (loader, mergeOption) => (loader || []).map(loader => ({
  loader: `${loader}`,
  options: mergeOption }));


const factoryConcatUse = defaultUse => (loader, mergeOption) => {
  return Array.isArray(defaultUse) ? defaultUse : [defaultUse].concat(factoryLoaders(loader, mergeOption));
};

function jsLoader(config) {
  const { options = {}, exclude = /node_modules/ } = config;
  const concatUse = factoryConcatUse(factoryUse('babel-loader', options));
  const factory = (regExp, loader) => (_regExp, mergeOption) => {
    if (_regExp instanceof RegExp) {
      regExp = _regExp;
    } else {
      mergeOption = _regExp;
    }
    const factory = factoryRules(regExp, { exclude });
    return factory(concatUse(loader || [], mergeOption || {}));
  };

  return {
    babel: factory(/\.(js|jsx)$/),
    ts: factory(/\.(ts|tsx)/, ['ts-loader']),
    ngTs: factory(/(?:\.ngfactory\.js|\.ngstyle\.js|\.ts)$/, ['@ngtools/webpack']) };

}


function cssLoader(config, isExtract) {
  const { options, exclude = /node_modules/ } = config;
  const styleUse = factoryUse('style-loader', {});
  const concatUse = factoryConcatUse([
  factoryUse('css-loader', options),
  factoryUse('postcss-loader', { config: { path: _path.default.join(__dirname, 'postcss.config.js') } })]);


  const factory = (regExp, loader) => (mergeOption = {}, extractTextPlugin) => {
    const factory = factoryRules(regExp, { exclude });
    let use = concatUse(loader || [], mergeOption);
    if (isExtract) {
      use.unshift(styleUse);
    } else {
      use = (extractTextPlugin || _extractTextWebpackPlugin.default).extract({ fallback: 'style-loader', use });
    }
    return factory(use);
  };

  return {
    css: factory(/\.(css)/),
    less: factory(/\.(less)/, ['less-loader']),
    sass: factory(/\.(sass|scss)/, ['sass-loader']) };

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3Rvb2xzL2NvcmUvdXRpbC50cyJdLCJuYW1lcyI6WyJjb21wb3NlIiwiZngiLCJneCIsImFyZyIsImFwcGx5IiwidW5kZWZpbmVkIiwiZmFjdG9yeVVzZSIsImxvYWRlciIsIm9wdGlvbnMiLCJtZXJnZU9wdGlvbiIsIk9iamVjdCIsImFzc2lnbiIsImZhY3RvcnlSdWxlcyIsInJlZ0V4cCIsInVzZSIsInRlc3QiLCJleGNsdWRlIiwiaW5jbHVkZSIsImZhY3RvcnlMb2FkZXJzIiwibWFwIiwiZmFjdG9yeUNvbmNhdFVzZSIsImRlZmF1bHRVc2UiLCJBcnJheSIsImlzQXJyYXkiLCJjb25jYXQiLCJqc0xvYWRlciIsImNvbmZpZyIsImNvbmNhdFVzZSIsImZhY3RvcnkiLCJfcmVnRXhwIiwiUmVnRXhwIiwiYmFiZWwiLCJ0cyIsIm5nVHMiLCJjc3NMb2FkZXIiLCJpc0V4dHJhY3QiLCJzdHlsZVVzZSIsInBhdGgiLCJqb2luIiwiX19kaXJuYW1lIiwiZXh0cmFjdFRleHRQbHVnaW4iLCJ1bnNoaWZ0IiwiRXh0cmFjdFRleHRQbHVnaW4iLCJleHRyYWN0IiwiZmFsbGJhY2siLCJjc3MiLCJsZXNzIiwic2FzcyJdLCJtYXBwaW5ncyI6InFJQUFBO0FBQ0EsK0Y7O0FBRUEsTUFBTUEsT0FBTyxHQUFHLENBQUNDLEVBQUQsRUFBVUMsRUFBVixLQUFzQixDQUFDLEdBQUdDLEdBQUosS0FBbUJGLEVBQUUsQ0FBQ0MsRUFBRSxDQUFDRSxLQUFILENBQVNDLFNBQVQsRUFBb0JGLEdBQXBCLENBQUQsQ0FBM0Q7O0FBRUEsTUFBTUcsVUFBVSxHQUFHLENBQUNDLE1BQUQsRUFBaUJDLE9BQWpCLEVBQStCQyxXQUEvQixNQUEyRDtBQUM1RUYsRUFBQUEsTUFENEU7QUFFNUVDLEVBQUFBLE9BQU8sRUFBRUUsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkgsT0FBbEIsRUFBMkJDLFdBQVcsSUFBSSxFQUExQyxDQUZtRSxFQUEzRCxDQUFuQjs7O0FBS0Es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QixpQkFBeEIsS0FBa0U7QUFDdkgsVUFBTVosT0FBTyxHQUFHaEIsWUFBWSxDQUFDQyxNQUFELEVBQVMsRUFBRUcsT0FBRixFQUFULENBQTVCO0FBQ0EsUUFBSUYsR0FBRyxHQUFHYSxTQUFTLENBQUNwQixNQUFNLElBQUksRUFBWCxFQUFlRSxXQUFmLENBQW5CO0FBQ0EsUUFBSTBCLFNBQUosRUFBZTtBQUNickIsTUFBQUEsR0FBRyxDQUFDMkIsT0FBSixDQUFZTCxRQUFaO0FBQ0QsS0FGRCxNQUVPO0FBQ0x0QixNQUFBQSxHQUFHLEdBQUcsQ0FBQzBCLGlCQUFpQixJQUFJRSxpQ0FBdEIsRUFBeUNDLE9BQXpDLENBQWlELEVBQUVDLFFBQVEsRUFBRSxjQUFaLEVBQTRCOUIsR0FBNUIsRUFBakQsQ0FBTjtBQUNEO0FBQ0QsV0FBT2MsT0FBTyxDQUFDZCxHQUFELENBQWQ7QUFDRCxHQVREOztBQVdBLFNBQU87QUFDTCtCLElBQUFBLEdBQUcsRUFBRWpCLE9BQU8sQ0FBQyxTQUFELENBRFA7QUFFTGtCLElBQUFBLElBQUksRUFBRWxCLE9BQU8sQ0FBQyxVQUFELEVBQWEsQ0FBQyxhQUFELENBQWIsQ0FGUjtBQUdMbUIsSUFBQUEsSUFBSSxFQUFFbkIsT0FBTyxDQUFDLGVBQUQsRUFBa0IsQ0FBQyxhQUFELENBQWxCLENBSFIsRUFBUDs7QUFLRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IEV4dHJhY3RUZXh0UGx1Z2luIGZyb20gJ2V4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpbic7XG5cbmNvbnN0IGNvbXBvc2UgPSAoZng6IGFueSwgZ3g6IGFueSkgPT4gKC4uLmFyZzogYW55W10pID0+IGZ4KGd4LmFwcGx5KHVuZGVmaW5lZCwgYXJnKSk7XG5cbmNvbnN0IGZhY3RvcnlVc2UgPSAobG9hZGVyOiBzdHJpbmcsIG9wdGlvbnM6IGFueSwgbWVyZ2VPcHRpb24/OiBhbnkpOiBhbnkgPT4gKHtcbiAgbG9hZGVyLFxuICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCBtZXJnZU9wdGlvbiB8fCB7fSksXG59KTtcblxuY29uc3QgZmFjdG9yeVJ1bGVzID0gKHJlZ0V4cDogUmVnRXhwLCBvcHRpb25zOiBhbnkgPSB7fSkgPT4gKHVzZTogYW55W10pID0+ICh7XG4gIHRlc3Q6IHJlZ0V4cCxcbiAgZXhjbHVkZTogb3B0aW9ucy5leGNsdWRlLFxuICBpbmNsdWRlOiBvcHRpb25zLmluY2x1ZGUsXG4gIHVzZSxcbn0pO1xuXG5jb25zdCBmYWN0b3J5TG9hZGVycyA9IChsb2FkZXI6IGFueSwgbWVyZ2VPcHRpb24/OiBhbnkpOiBhbnlbXSA9PiAobG9hZGVyIHx8IFtdKS5tYXAoKGxvYWRlcjogc3RyaW5nKSA9PiAoe1xuICBsb2FkZXI6IGAke2xvYWRlcn1gLFxuICBvcHRpb25zOiBtZXJnZU9wdGlvbixcbn0pKTtcblxuY29uc3QgZmFjdG9yeUNvbmNhdFVzZSA9IChkZWZhdWx0VXNlOiBhbnlbXSB8IGFueSkgPT4gKGxvYWRlcjogc3RyaW5nW10sIG1lcmdlT3B0aW9uPzogYW55KTogYW55W10gPT4ge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShkZWZhdWx0VXNlKSA/IGRlZmF1bHRVc2UgOiBbZGVmYXVsdFVzZV0uY29uY2F0KGZhY3RvcnlMb2FkZXJzKGxvYWRlciwgbWVyZ2VPcHRpb24pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGpzTG9hZGVyKGNvbmZpZzogYW55KSB7XG4gIGNvbnN0IHsgb3B0aW9ucyA9IHt9LCBleGNsdWRlID0gL25vZGVfbW9kdWxlcy8gfSA9IGNvbmZpZztcbiAgY29uc3QgY29uY2F0VXNlID0gZmFjdG9yeUNvbmNhdFVzZShmYWN0b3J5VXNlKCdiYWJlbC1sb2FkZXInLCBvcHRpb25zKSk7XG4gIGNvbnN0IGZhY3RvcnkgPSAocmVnRXhwOiBSZWdFeHAsIGxvYWRlcj86IHN0cmluZ1tdKSA9PiAoX3JlZ0V4cD86IGFueSwgbWVyZ2VPcHRpb24/OiBhbnkpID0+IHtcbiAgICBpZiAoX3JlZ0V4cCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmVnRXhwID0gX3JlZ0V4cDtcbiAgICB9IGVsc2Uge1xuICAgICAgbWVyZ2VPcHRpb24gPSBfcmVnRXhwO1xuICAgIH1cbiAgICBjb25zdCBmYWN0b3J5ID0gZmFjdG9yeVJ1bGVzKHJlZ0V4cCwgeyBleGNsdWRlIH0pO1xuICAgIHJldHVybiBmYWN0b3J5KGNvbmNhdFVzZShsb2FkZXIgfHwgW10sIG1lcmdlT3B0aW9uIHx8IHt9KSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJhYmVsOiBmYWN0b3J5KC9cXC4oanN8anN4KSQvKSxcbiAgICB0czogZmFjdG9yeSgvXFwuKHRzfHRzeCkvLCBbJ3RzLWxvYWRlciddKSxcbiAgICBuZ1RzOiBmYWN0b3J5KC8oPzpcXC5uZ2ZhY3RvcnlcXC5qc3xcXC5uZ3N0eWxlXFwuanN8XFwudHMpJC8sIFsnQG5ndG9vbHMvd2VicGFjayddKSxcbiAgfTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gY3NzTG9hZGVyKGNvbmZpZzogYW55LCBpc0V4dHJhY3Q/OiBib29sZWFuKSB7XG4gIGNvbnN0IHsgb3B0aW9ucywgZXhjbHVkZSA9IC9ub2RlX21vZHVsZXMvIH0gPSBjb25maWc7XG4gIGNvbnN0IHN0eWxlVXNlID0gZmFjdG9yeVVzZSgnc3R5bGUtbG9hZGVyJywge30pO1xuICBjb25zdCBjb25jYXRVc2UgPSBmYWN0b3J5Q29uY2F0VXNlKFtcbiAgICBmYWN0b3J5VXNlKCdjc3MtbG9hZGVyJywgb3B0aW9ucyksXG4gICAgZmFjdG9yeVVzZSgncG9zdGNzcy1sb2FkZXInLCB7IGNvbmZpZzogeyBwYXRoOiBwYXRoLmpvaW4oX19kaXJuYW1lLCAncG9zdGNzcy5jb25maWcuanMnKSB9IH0pLFxuICBdKTtcblxuICBjb25zdCBmYWN0b3J5ID0gKHJlZ0V4cDogUmVnRXhwLCBsb2FkZXI/OiBzdHJpbmdbXSkgPT4gKG1lcmdlT3B0aW9uOiBhbnkgPSB7fSwgZXh0cmFjdFRleHRQbHVnaW4/OiBFeHRyYWN0VGV4dFBsdWdpbikgPT4ge1xuICAgIGNvbnN0IGZhY3RvcnkgPSBmYWN0b3J5UnVsZXMocmVnRXhwLCB7IGV4Y2x1ZGUgfSk7XG4gICAgbGV0IHVzZSA9IGNvbmNhdFVzZShsb2FkZXIgfHwgW10sIG1lcmdlT3B0aW9uKTtcbiAgICBpZiAoaXNFeHRyYWN0KSB7XG4gICAgICB1c2UudW5zaGlmdChzdHlsZVVzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVzZSA9IChleHRyYWN0VGV4dFBsdWdpbiB8fCBFeHRyYWN0VGV4dFBsdWdpbikuZXh0cmFjdCh7IGZhbGxiYWNrOiAnc3R5bGUtbG9hZGVyJywgdXNlIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZmFjdG9yeSh1c2UpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjc3M6IGZhY3RvcnkoL1xcLihjc3MpLyksXG4gICAgbGVzczogZmFjdG9yeSgvXFwuKGxlc3MpLywgWydsZXNzLWxvYWRlciddKSxcbiAgICBzYXNzOiBmYWN0b3J5KC9cXC4oc2Fzc3xzY3NzKS8sIFsnc2Fzcy1sb2FkZXInXSlcbiAgfVxufVxuIl19