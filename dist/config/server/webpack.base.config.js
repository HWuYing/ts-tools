"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _webpackNodeExternals = _interopRequireDefault(require("webpack-node-externals"));
var _webpackMerge = _interopRequireDefault(require("webpack-merge"));

var _path = _interopRequireDefault(require("path"));
var _fs = require("../../core/fs");
var _util = require("../../core/util");
var _config = _interopRequireDefault(require("../config"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const { srcDir, baseDir, buildDir, babellrc } = _config.default;
const mergeServerConfig = (0, _fs.requireSync)(`${baseDir}/webpack.server.js`) || {};
const jsRules = (0, _util.jsLoader)({ options: babellrc });var _default =

() => (0, _webpackMerge.default)({
  context: baseDir,
  target: 'node',
  entry: {
    server: _path.default.resolve(srcDir, 'index.ts') },

  output: {
    path: buildDir,
    chunkFilename: `[name].check.[hash:8].js`,
    filename: `[name].js`,
    library: 'commonjs2' },

  resolve: {
    modules: ['node_modules', 'src'],
    extensions: ['.js', '.jsx', '.ts', '.tsx'] },

  externals: [
  '../build/assets.json',
  (0, _webpackNodeExternals.default)()],

  module: {
    rules: [
    jsRules.babel(),
    jsRules.ts({
      transpileOnly: true,
      context: baseDir })] },



  plugins: [],
  node: {
    console: false,
    global: false,
    process: false,
    Buffer: false,
    __filename: false,
    __dirname: false },

  stats: {
    colors: true,
    timings: true } },

mergeServerConfig);exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rvb2xzL2NvbmZpZy9zZXJ2ZXIvd2VicGFjay5iYXNlLmNvbmZpZy50cyJdLCJuYW1lcyI6WyJzcmNEaXIiLCJiYXNlRGlyIiwiYnVpbGREaXIiLCJiYWJlbGxyYyIsImNvbmZpZyIsIm1lcmdlU2VydmVyQ29uZmlnIiwianNSdWxlcyIsIm9wdGlvbnMiLCJjb250ZXh0IiwidGFyZ2V0IiwiZW50cnkiLCJzZXJ2ZXIiLCJwYXRoIiwicmVzb2x2ZSIsIm91dHB1dCIsImNodW5rRmlsZW5hbWUiLCJmaWxlbmFtZSIsImxpYnJhcnkiLCJtb2R1bGVzIiwiZXh0ZW5zaW9ucyIsImV4dGVybmFscyIsIm1vZHVsZSIsInJ1bGVzIiwiYmFiZWwiLCJ0cyIsInRyYW5zcGlsZU9ubHkiLCJwbHVnaW5zIiwibm9kZSIsImNvbnNvbGUiLCJnbG9iYWwiLCJwcm9jZXNzIiwiQnVmZmVyIiwiX19maWxlbmFtZSIsIl9fZGlybmFtZSIsInN0YXRzIiwiY29sb3JzIiwidGltaW5ncyJdLCJtYXBwaW5ncyI6Im9HQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsMkQ7O0FBRUEsTUFBTSxFQUFFQSxNQUFGLEVBQVVDLE9BQVYsRUFBbUJDLFFBQW5CLEVBQTZCQyxRQUE3QixLQUEwQ0MsZUFBaEQ7QUFDQSxNQUFNQyxpQkFBaUIsR0FBRyxxQkFBYSxHQUFFSixPQUFRLG9CQUF2QixLQUErQyxFQUF6RTtBQUNBLE1BQU1LLE9BQU8sR0FBRyxvQkFBUyxFQUFFQyxPQUFPLEVBQUVKLFFBQVgsRUFBVCxDQUFoQixDOztBQUVlLE1BQXFCLDJCQUFNO0FBQ3hDSyxFQUFBQSxPQUFPLEVBQUVQLE9BRCtCO0FBRXhDUSxFQUFBQSxNQUFNLEVBQUUsTUFGZ0M7QUFHeENDLEVBQUFBLEtBQUssRUFBRTtBQUNMQyxJQUFBQSxNQUFNLEVBQUVDLGNBQUtDLE9BQUwsQ0FBYWIsTUFBYixFQUFxQixVQUFyQixDQURILEVBSGlDOztBQU14Q2MsRUFBQUEsTUFBTSxFQUFFO0FBQ05GLElBQUFBLElBQUksRUFBRVYsUUFEQTtBQUVOYSxJQUFBQSxhQUFhLEVBQUcsMEJBRlY7QUFHTkMsSUFBQUEsUUFBUSxFQUFHLFdBSEw7QUFJTkMsSUFBQUEsT0FBTyxFQUFFLFdBSkgsRUFOZ0M7O0FBWXhDSixFQUFBQSxPQUFPLEVBQUU7QUFDUEssSUFBQUEsT0FBTyxFQUFFLENBQUMsY0FBRCxFQUFpQixLQUFqQixDQURGO0FBRVBDLElBQUFBLFVBQVUsRUFBRSxDQUFDLEtBQUQsRUFBUSxNQUFSLEVBQWdCLEtBQWhCLEVBQXVCLE1BQXZCLENBRkwsRUFaK0I7O0FBZ0J4Q0MsRUFBQUEsU0FBUyxFQUFFO0FBQ1Qsd0JBRFM7QUFFVCxzQ0FGUyxDQWhCNkI7O0FBb0J4Q0MsRUFBQUEsTUFBTSxFQUFFO0FBQ05DLElBQUFBLEtBQUssRUFBRTtBQUNMaEIsSUFBQUEsT0FBTyxDQUFDaUIsS0FBUixFQURLO0FBRUxqQixJQUFBQSxPQUFPLENBQUNrQixFQUFSLENBQVc7QUFDVEMsTUFBQUEsYUFBYSxFQUFFLElBRE47QUFFVGpCLE1BQUFBLE9BQU8sRUFBRVAsT0FGQSxFQUFYLENBRkssQ0FERCxFQXBCZ0M7Ozs7QUE2QnhDeUIsRUFBQUEsT0FBTyxFQUFFLEVBN0IrQjtBQThCeENDLEVBQUFBLElBQUksRUFBRTtBQUNKQyxJQUFBQSxPQUFPLEVBQUUsS0FETDtBQUVKQyxJQUFBQSxNQUFNLEVBQUUsS0FGSjtBQUdKQyxJQUFBQSxPQUFPLEVBQUUsS0FITDtBQUlKQyxJQUFBQSxNQUFNLEVBQUUsS0FKSjtBQUtKQyxJQUFBQSxVQUFVLEVBQUUsS0FMUjtBQU1KQyxJQUFBQSxTQUFTLEVBQUUsS0FOUCxFQTlCa0M7O0FBc0N4Q0MsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLE1BQU0sRUFBRSxJQURIO0FBRUxDLElBQUFBLE9BQU8sRUFBRSxJQUZKLEVBdENpQyxFQUFOOztBQTBDakMvQixpQkExQ2lDLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbm9kZUV4dHJuYWxzIGZyb20gJ3dlYnBhY2stbm9kZS1leHRlcm5hbHMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJ3dlYnBhY2stbWVyZ2UnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvbiB9IGZyb20gJ3dlYnBhY2snO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyByZXF1aXJlU3luYyB9IGZyb20gJy4uLy4uL2NvcmUvZnMnO1xuaW1wb3J0IHsganNMb2FkZXIgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuLi9jb25maWcnO1xuXG5jb25zdCB7IHNyY0RpciwgYmFzZURpciwgYnVpbGREaXIsIGJhYmVsbHJjIH0gPSBjb25maWc7XG5jb25zdCBtZXJnZVNlcnZlckNvbmZpZyA9IHJlcXVpcmVTeW5jKGAke2Jhc2VEaXJ9L3dlYnBhY2suc2VydmVyLmpzYCkgfHwge307XG5jb25zdCBqc1J1bGVzID0ganNMb2FkZXIoeyBvcHRpb25zOiBiYWJlbGxyYyB9KTtcblxuZXhwb3J0IGRlZmF1bHQgKCk6IENvbmZpZ3VyYXRpb24gPT4gbWVyZ2Uoe1xuICBjb250ZXh0OiBiYXNlRGlyLFxuICB0YXJnZXQ6ICdub2RlJyxcbiAgZW50cnk6IHtcbiAgICBzZXJ2ZXI6IHBhdGgucmVzb2x2ZShzcmNEaXIsICdpbmRleC50cycpLFxuICB9LFxuICBvdXRwdXQ6IHtcbiAgICBwYXRoOiBidWlsZERpcixcbiAgICBjaHVua0ZpbGVuYW1lOiBgW25hbWVdLmNoZWNrLltoYXNoOjhdLmpzYCxcbiAgICBmaWxlbmFtZTogYFtuYW1lXS5qc2AsXG4gICAgbGlicmFyeTogJ2NvbW1vbmpzMicsXG4gIH0sXG4gIHJlc29sdmU6IHtcbiAgICBtb2R1bGVzOiBbJ25vZGVfbW9kdWxlcycsICdzcmMnXSxcbiAgICBleHRlbnNpb25zOiBbJy5qcycsICcuanN4JywgJy50cycsICcudHN4J10sXG4gIH0sXG4gIGV4dGVybmFsczogW1xuICAgICcuLi9idWlsZC9hc3NldHMuanNvbicsXG4gICAgbm9kZUV4dHJuYWxzKCksXG4gIF0sXG4gIG1vZHVsZToge1xuICAgIHJ1bGVzOiBbXG4gICAgICBqc1J1bGVzLmJhYmVsKCksXG4gICAgICBqc1J1bGVzLnRzKHtcbiAgICAgICAgdHJhbnNwaWxlT25seTogdHJ1ZSxcbiAgICAgICAgY29udGV4dDogYmFzZURpcixcbiAgICAgIH0pLFxuICAgIF0sXG4gIH0sXG4gIHBsdWdpbnM6IFtdLFxuICBub2RlOiB7XG4gICAgY29uc29sZTogZmFsc2UsXG4gICAgZ2xvYmFsOiBmYWxzZSxcbiAgICBwcm9jZXNzOiBmYWxzZSxcbiAgICBCdWZmZXI6IGZhbHNlLFxuICAgIF9fZmlsZW5hbWU6IGZhbHNlLFxuICAgIF9fZGlybmFtZTogZmFsc2UsXG4gIH0sXG4gIHN0YXRzOiB7XG4gICAgY29sb3JzOiB0cnVlLFxuICAgIHRpbWluZ3M6IHRydWUsXG4gIH0sXG59LCBtZXJnZVNlcnZlckNvbmZpZyk7XG4iXX0=