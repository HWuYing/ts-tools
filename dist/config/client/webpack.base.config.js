"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _path = _interopRequireDefault(require("path"));
var _webpackMerge = _interopRequireDefault(require("webpack-merge"));
var _webpack = require("webpack");
var _extractTextWebpackPlugin = _interopRequireDefault(require("extract-text-webpack-plugin"));
var _assetsWebpackPlugin = _interopRequireDefault(require("assets-webpack-plugin"));
var _copyWebpackPlugin = _interopRequireDefault(require("copy-webpack-plugin"));
var _fs = require("../../core/fs");
var _util = require("../../core/util");
var _config = _interopRequireDefault(require("../config"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const { srcDir, baseDir, buildDir, babellrc, browserslist, isDebug } = _config.default;
const mergeClientConfig = (0, _fs.requireSync)(`${baseDir}/webpack.client.js`);
const assetsPlugin = new _assetsWebpackPlugin.default({
  filename: 'assets.json',
  path: buildDir,
  prettyPrint: true,
  update: true });

const copyPlugin = new _copyWebpackPlugin.default([{ from: _path.default.join(baseDir, 'public'), to: _path.default.join(buildDir, 'public') }]);
const { presets, plugins } = babellrc;
const jsRules = (0, _util.jsLoader)({
  options: {
    presets: [
    ["@babel/preset-env", {
      "targets": browserslist }],

    ...(presets || []).slice(1)],

    plugins: [
    ...(plugins || [])] } });




const extractLess = new _extractTextWebpackPlugin.default(`styleSheet/[name]less.[hash:8].css`);
const extractScss = new _extractTextWebpackPlugin.default(`styleSheet/[name]scss.[hash:8].css`);
const cssRules = (0, _util.cssLoader)({}, isDebug);var _default =

() => (0, _webpackMerge.default)({
  context: baseDir,
  target: 'web',
  entry: {
    main: _path.default.resolve(srcDir, 'app/main.ts') },

  output: {
    publicPath: '',
    path: _path.default.join(buildDir, 'public'),
    chunkFilename: `check/[name].[chunkhash:8].js`,
    filename: `javascript/[name].[hash:8].js` },

  resolve: {
    modules: [_path.default.resolve(baseDir, 'node_modules'), _path.default.relative(baseDir, 'src')],
    extensions: ['.js', '.ts'] },

  module: {
    rules: [
    jsRules.babel({}),
    jsRules.ts({}),
    cssRules.less({}, extractLess),
    cssRules.sass({}, extractScss)] },


  plugins: [
  copyPlugin,
  extractLess,
  extractScss,
  new _webpack.ProgressPlugin(),
  assetsPlugin],

  stats: {
    colors: true,
    timings: true } },

mergeClientConfig);exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rvb2xzL2NvbmZpZy9jbGllbnQvd2VicGFjay5iYXNlLmNvbmZpZy50cyJdLCJuYW1lcyI6WyJzcmNEaXIiLCJiYXNlRGlyIiwiYnVpbGREaXIiLCJiYWJlbGxyYyIsImJyb3dzZXJzbGlzdCIsImlzRGVidWciLCJjb25maWciLCJtZXJnZUNsaWVudENvbmZpZyIsImFzc2V0c1BsdWdpbiIsIkFzc2V0c1dlYnBhY2tQbHVnaW4iLCJmaWxlbmFtZSIsInBhdGgiLCJwcmV0dHlQcmludCIsInVwZGF0ZSIsImNvcHlQbHVnaW4iLCJDb3B5UGx1Z2luIiwiZnJvbSIsImpvaW4iLCJ0byIsInByZXNldHMiLCJwbHVnaW5zIiwianNSdWxlcyIsIm9wdGlvbnMiLCJzbGljZSIsImV4dHJhY3RMZXNzIiwiRXh0cmFjdFRleHRQbHVnaW4iLCJleHRyYWN0U2NzcyIsImNzc1J1bGVzIiwiY29udGV4dCIsInRhcmdldCIsImVudHJ5IiwibWFpbiIsInJlc29sdmUiLCJvdXRwdXQiLCJwdWJsaWNQYXRoIiwiY2h1bmtGaWxlbmFtZSIsIm1vZHVsZXMiLCJyZWxhdGl2ZSIsImV4dGVuc2lvbnMiLCJtb2R1bGUiLCJydWxlcyIsImJhYmVsIiwidHMiLCJsZXNzIiwic2FzcyIsIlByb2dyZXNzUGx1Z2luIiwic3RhdHMiLCJjb2xvcnMiLCJ0aW1pbmdzIl0sIm1hcHBpbmdzIjoib0dBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEOztBQUVBLE1BQU0sRUFBRUEsTUFBRixFQUFVQyxPQUFWLEVBQW1CQyxRQUFuQixFQUE2QkMsUUFBN0IsRUFBdUNDLFlBQXZDLEVBQXFEQyxPQUFyRCxLQUFpRUMsZUFBdkU7QUFDQSxNQUFPQyxpQkFBaUIsR0FBRyxxQkFBYSxHQUFFTixPQUFRLG9CQUF2QixDQUEzQjtBQUNBLE1BQU1PLFlBQVksR0FBRyxJQUFJQyw0QkFBSixDQUF3QjtBQUMzQ0MsRUFBQUEsUUFBUSxFQUFFLGFBRGlDO0FB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aUMsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IG1lcmdlIGZyb20gJ3dlYnBhY2stbWVyZ2UnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvbiwgUHJvZ3Jlc3NQbHVnaW4gfSBmcm9tICd3ZWJwYWNrJztcbmltcG9ydCBFeHRyYWN0VGV4dFBsdWdpbiBmcm9tICdleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW4nO1xuaW1wb3J0IEFzc2V0c1dlYnBhY2tQbHVnaW4gZnJvbSAnYXNzZXRzLXdlYnBhY2stcGx1Z2luJztcbmltcG9ydCBDb3B5UGx1Z2luIGZyb20gJ2NvcHktd2VicGFjay1wbHVnaW4nO1xuaW1wb3J0IHsgcmVxdWlyZVN5bmMgfSBmcm9tICcuLi8uLi9jb3JlL2ZzJztcbmltcG9ydCB7IGpzTG9hZGVyLCBjc3NMb2FkZXIgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuLi9jb25maWcnO1xuXG5jb25zdCB7IHNyY0RpciwgYmFzZURpciwgYnVpbGREaXIsIGJhYmVsbHJjLCBicm93c2Vyc2xpc3QsIGlzRGVidWcgfSA9IGNvbmZpZztcbmNvbnN0ICBtZXJnZUNsaWVudENvbmZpZyA9IHJlcXVpcmVTeW5jKGAke2Jhc2VEaXJ9L3dlYnBhY2suY2xpZW50LmpzYCk7XG5jb25zdCBhc3NldHNQbHVnaW4gPSBuZXcgQXNzZXRzV2VicGFja1BsdWdpbih7XG4gIGZpbGVuYW1lOiAnYXNzZXRzLmpzb24nLFxuICBwYXRoOiBidWlsZERpcixcbiAgcHJldHR5UHJpbnQ6IHRydWUsXG4gIHVwZGF0ZTogdHJ1ZSxcbn0pO1xuY29uc3QgY29weVBsdWdpbiA9IG5ldyBDb3B5UGx1Z2luKFt7IGZyb206IHBhdGguam9pbihiYXNlRGlyLCAncHVibGljJyksIHRvOiBwYXRoLmpvaW4oYnVpbGREaXIsICdwdWJsaWMnKSB9XSk7XG5jb25zdCB7IHByZXNldHMsIHBsdWdpbnMgfSA9IGJhYmVsbHJjO1xuY29uc3QganNSdWxlcyA9IGpzTG9hZGVyKHtcbiAgb3B0aW9uczoge1xuICAgIHByZXNldHM6IFtcbiAgICAgIFtcIkBiYWJlbC9wcmVzZXQtZW52XCIsIHtcbiAgICAgICAgXCJ0YXJnZXRzXCI6IGJyb3dzZXJzbGlzdCxcbiAgICAgIH1dLFxuICAgICAgLi4uKHByZXNldHMgfHwgW10pLnNsaWNlKDEpLFxuICAgIF0sXG4gICAgcGx1Z2luczogW1xuICAgICAgLi4uKHBsdWdpbnMgfHwgW10pLFxuICAgIF0sXG4gIH1cbn0pO1xuXG5jb25zdCBleHRyYWN0TGVzcyA9IG5ldyBFeHRyYWN0VGV4dFBsdWdpbihgc3R5bGVTaGVldC9bbmFtZV1sZXNzLltoYXNoOjhdLmNzc2ApO1xuY29uc3QgZXh0cmFjdFNjc3MgPSBuZXcgRXh0cmFjdFRleHRQbHVnaW4oYHN0eWxlU2hlZXQvW25hbWVdc2Nzcy5baGFzaDo4XS5jc3NgKTtcbmNvbnN0IGNzc1J1bGVzID0gY3NzTG9hZGVyKHt9LCBpc0RlYnVnKTtcblxuZXhwb3J0IGRlZmF1bHQgKCk6IENvbmZpZ3VyYXRpb24gPT4gbWVyZ2Uoe1xuICBjb250ZXh0OiBiYXNlRGlyLFxuICB0YXJnZXQ6ICd3ZWInLFxuICBlbnRyeToge1xuICAgIG1haW46IHBhdGgucmVzb2x2ZShzcmNEaXIsICdhcHAvbWFpbi50cycpLFxuICB9LFxuICBvdXRwdXQ6IHtcbiAgICBwdWJsaWNQYXRoOiAnJyxcbiAgICBwYXRoOiBwYXRoLmpvaW4oYnVpbGREaXIsICdwdWJsaWMnKSxcbiAgICBjaHVua0ZpbGVuYW1lOiBgY2hlY2svW25hbWVdLltjaHVua2hhc2g6OF0uanNgLFxuICAgIGZpbGVuYW1lOiBgamF2YXNjcmlwdC9bbmFtZV0uW2hhc2g6OF0uanNgLFxuICB9LFxuICByZXNvbHZlOiB7XG4gICAgbW9kdWxlczogW3BhdGgucmVzb2x2ZShiYXNlRGlyLCAnbm9kZV9tb2R1bGVzJyksIHBhdGgucmVsYXRpdmUoYmFzZURpciwgJ3NyYycpXSxcbiAgICBleHRlbnNpb25zOiBbJy5qcycsICcudHMnXSxcbiAgfSxcbiAgbW9kdWxlOiB7XG4gICAgcnVsZXM6IFtcbiAgICAgIGpzUnVsZXMuYmFiZWwoe30pLFxuICAgICAganNSdWxlcy50cyh7fSksXG4gICAgICBjc3NSdWxlcy5sZXNzKHt9LCBleHRyYWN0TGVzcyksXG4gICAgICBjc3NSdWxlcy5zYXNzKHt9LCBleHRyYWN0U2NzcyksXG4gICAgXSxcbiAgfSxcbiAgcGx1Z2luczogW1xuICAgIGNvcHlQbHVnaW4sXG4gICAgZXh0cmFjdExlc3MsXG4gICAgZXh0cmFjdFNjc3MsXG4gICAgbmV3IFByb2dyZXNzUGx1Z2luKCksXG4gICAgYXNzZXRzUGx1Z2luLFxuICBdLFxuICBzdGF0czoge1xuICAgIGNvbG9yczogdHJ1ZSxcbiAgICB0aW1pbmdzOiB0cnVlLFxuICB9LFxufSwgbWVyZ2VDbGllbnRDb25maWcpO1xuIl19