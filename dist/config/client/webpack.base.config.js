"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _path = _interopRequireDefault(require("path"));
var _webpack = require("webpack");
var _extractTextWebpackPlugin = _interopRequireDefault(require("extract-text-webpack-plugin"));
var _assetsWebpackPlugin = _interopRequireDefault(require("assets-webpack-plugin"));
var _copyWebpackPlugin = _interopRequireDefault(require("copy-webpack-plugin"));
var _util = require("../../core/util");
var _config = _interopRequireDefault(require("../config"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const { srcDir, baseDir, buildDir, babellrc, browserslist, isDebug } = _config.default;
const assetsPlugin = new _assetsWebpackPlugin.default({
  filename: 'assets.json',
  path: buildDir,
  prettyPrint: true,
  update: true });

const copyPlugin = new _copyWebpackPlugin.default([{ from: _path.default.join(baseDir, 'public'), to: _path.default.join(buildDir, 'public') }]);
const { presets, plugins } = babellrc;
const jsRules = (0, _util.jsLoader)({
  options: {
    presets: [
    ["@babel/preset-env", {
      "targets": browserslist }],

    ...(presets || []).slice(1)],

    plugins: [
    ...(plugins || [])] } });




const extractLess = new _extractTextWebpackPlugin.default(`styleSheet/[name]less.[hash:8].css`);
const extractScss = new _extractTextWebpackPlugin.default(`styleSheet/[name]scss.[hash:8].css`);
const cssRules = (0, _util.cssLoader)({}, isDebug);var _default =

() => ({
  context: baseDir,
  target: 'web',
  entry: {
    main: _path.default.resolve(srcDir, 'app/main.ts') },

  output: {
    publicPath: '',
    path: _path.default.join(buildDir, 'public'),
    chunkFilename: `check/[name].[chunkhash:8].js`,
    filename: `javascript/[name].[hash:8].js` },

  resolve: {
    modules: [_path.default.resolve(baseDir, 'node_modules'), _path.default.relative(baseDir, 'src')],
    extensions: ['.js', '.ts'] },

  module: {
    rules: [
    jsRules.babel({}),
    jsRules.ts({}),
    cssRules.less({}, extractLess),
    cssRules.sass({}, extractScss)] },


  plugins: [
  copyPlugin,
  extractLess,
  extractScss,
  new _webpack.ProgressPlugin(),
  assetsPlugin],

  stats: {
    colors: true,
    timings: true } });exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Rvb2xzL2NvbmZpZy9jbGllbnQvd2VicGFjay5iYXNlLmNvbmZpZy50cyJdLCJuYW1lcyI6WyJzcmNEaXIiLCJiYXNlRGlyIiwiYnVpbGREaXIiLCJiYWJlbGxyYyIsImJyb3dzZXJzbGlzdCIsImlzRGVidWciLCJjb25maWciLCJhc3NldHNQbHVnaW4iLCJBc3NldHNXZWJwYWNrUGx1Z2luIiwiZmlsZW5hbWUiLCJwYXRoIiwicHJldHR5UHJpbnQiLCJ1cGRhdGUiLCJjb3B5UGx1Z2luIiwiQ29weVBsdWdpbiIsImZyb20iLCJqb2luIiwidG8iLCJwcmVzZXRzIiwicGx1Z2lucyIsImpzUnVsZXMiLCJvcHRpb25zIiwic2xpY2UiLCJleHRyYWN0TGVzcyIsIkV4dHJhY3RUZXh0UGx1Z2luIiwiZXh0cmFjdFNjc3MiLCJjc3NSdWxlcyIsImNvbnRleHQiLCJ0YXJnZXQiLCJlbnRyeSIsIm1haW4iLCJyZXNvbHZlIiwib3V0cHV0IiwicHVibGljUGF0aCIsImNodW5rRmlsZW5hbWUiLCJtb2R1bGVzIiwicmVsYXRpdmUiLCJleHRlbnNpb25zIiwibW9kdWxlIiwicnVsZXMiLCJiYWJlbCIsInRzIiwibGVzcyIsInNhc3MiLCJQcm9ncmVzc1BsdWdpbiIsInN0YXRzIiwiY29sb3JzIiwidGltaW5ncyJdLCJtYXBwaW5ncyI6Im9HQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEOztBQUVBLE1BQU0sRUFBRUEsTUFBRixFQUFVQyxPQUFWLEVBQW1CQyxRQUFuQixFQUE2QkMsUUFBN0IsRUFBdUNDLFlBQXZDLEVBQXFEQyxPQUFyRCxLQUFpRUMsZUFBdkU7QUFDQSxNQUFNQyxZQUFZLEdBQUcsSUFBSUMsNEJBQUosQ0FBd0I7QUFDM0NDLEVBQUFBLFFBQVEsRUFBRSxhQURpQztBQUUzQ0MsRUFBQUEsSUFBSSxFQUFFUixRQUZxQztBQUczQ1MsRUFBQUEsV0FBVyxFQUFFLElBSDhCO0FBSTNDQyxFQUFBQSxNQUFNLEVBQUUsSUFKbUMsRUFBeEIsQ0FBckI7O0FBTUEsTUFBTUMsVUFBVSxHQUFHLElBQUlDLDBCQUFKLENBQWUsQ0FBQyxFQUFFQyxJQUFJLEVBQUVMLGNBQUtNLElBQUwsQ0FBVWYsT0FBVixFQUFtQixRQUFuQixDQUFSLEVBQXNDZ0IsRUFBRSxFQUFFUCxjQUFLTSxJQUFMLENBQVVkLFFBQVYsRUFBb0IsUUFBcEIsQ0FBMUMsRUFBRCxDQUFmLENBQW5CO0FBQ0EsTUFBTSxFQUFFZ0IsT0FBRixFQUFXQyxPQUFYLEtBQXVCaEIsUUFBN0I7QUFDQSxNQUFNaUIsT0FBTyxHQUFHLG9CQUFTO0FBQ3ZCQyxFQUFBQSxPQUFPLEVBQUU7QUFDUEgsSUFBQUEsT0FBTyxFQUFFO0FBQ1AsS0FBQyxtQkFBRCxFQUFzQjtBQUNwQixpQkFBV2QsWUFEUyxFQUF0QixDQURPOztBQUlQLE9BQUcsQ0FBQ2MsT0FBTyxJQUFJLEVBQVosRUFBZ0JJLEtBQWhCLENBQXNCLENBQXRCLENBSkksQ0FERjs7QUFPUEgsSUFBQUEsT0FBTyxFQUFFO0FBQ1AsUUFBSUEsT0FBTyxJQUFJLEVBQWYsQ0FETyxDQVBGLEVBRGMsRUFBVCxDQUFoQjs7Ozs7QUFjQSxNQUFNSSxXQUFXLEdBQUcsSUFBSUMsaUNBQUosQ0FBdUIsb0NBQXZCLENBQXBCO0FBQ0EsTUFBTUMsV0FBVyxHQUFHLElBQUlELGlDQUFKLENBQXVCLG9DQUF2QixDQUFwQjtBQUNBLE1BQU1FLFFBQVEsR0FBRyxxQkFBVSxFQUFWLEVBQWNyQixPQUFkLENBQWpCLEM7O0FBRWUsT0FBc0I7QUFDbkNzQixFQUFBQSxPQUFPLEVBQUUxQixPQUQwQjtBQUVuQzJCLEVBQUFBLE1BQU0sRUFBRSxLQUYyQjtBQUduQ0MsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLElBQUksRUFBRXBCLGNBQUtxQixPQUFMLENBQWEvQixNQUFiLEVBQXFCLGFBQXJCLENBREQsRUFINEI7O0FBTW5DZ0MsRUFBQUEsTUFBTSxFQUFFO0FBQ05DLElBQUFBLFVBQVUsRUFBRSxFQUROO0FBRU52QixJQUFBQSxJQUFJLEVBQUVBLGNBQUtNLElBQUwsQ0FBVWQsUUFBVixFQUFvQixRQUFwQixDQUZBO0FBR05nQyxJQUFBQSxhQUFhLEVBQUcsK0JBSFY7QUFJTnpCLElBQUFBLFFBQVEsRUFBRywrQkFKTCxFQU4yQjs7QUFZbkNzQixFQUFBQSxPQUFPLEVBQUU7QUFDUEksSUFBQUEsT0FBTyxFQUFFLENBQUN6QixjQUFLcUIsT0FBTCxDQUFhOUIsT0FBYixFQUFzQixjQUF0QixDQUFELEVBQXdDUyxjQUFLMEIsUUFBTCxDQUFjbkMsT0FBZCxFQUF1QixLQUF2QixDQUF4QyxDQURGO0FBRVBvQyxJQUFBQSxVQUFVLEVBQUUsQ0FBQyxLQUFELEVBQVEsS0FBUixDQUZMLEVBWjBCOztBQWdCbkNDLEVBQUFBLE1BQU0sRUFBRTtBQUNOQyxJQUFBQSxLQUFLLEVBQUU7QUFDTG5CLElBQUFBLE9BQU8sQ0FBQ29CLEtBQVIsQ0FBYyxFQUFkLENBREs7QUFFTHBCLElBQUFBLE9BQU8sQ0FBQ3FCLEVBQVIsQ0FBVyxFQUFYLENBRks7QUFHTGYsSUFBQUEsUUFBUSxDQUFDZ0IsSUFBVCxDQUFjLEVBQWQsRUFBa0JuQixXQUFsQixDQUhLO0FBSUxHLElBQUFBLFFBQVEsQ0FBQ2lCLElBQVQsQ0FBYyxFQUFkLEVBQWtCbEIsV0FBbEIsQ0FKSyxDQURELEVBaEIyQjs7O0FBd0JuQ04sRUFBQUEsT0FBTyxFQUFFO0FBQ1BOLEVBQUFBLFVBRE87QUFFUFUsRUFBQUEsV0FGTztBQUdQRSxFQUFBQSxXQUhPO0FBSVAsTUFBSW1CLHVCQUFKLEVBSk87QUFLUHJDLEVBQUFBLFlBTE8sQ0F4QjBCOztBQStCbkNzQyxFQUFBQSxLQUFLLEVBQUU7QUFDTEMsSUFBQUEsTUFBTSxFQUFFLElBREg7QUFFTEMsSUFBQUEsT0FBTyxFQUFFLElBRkosRUEvQjRCLEVBQXRCLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IENvbmZpZ3VyYXRpb24sIFByb2dyZXNzUGx1Z2luIH0gZnJvbSAnd2VicGFjayc7XG5pbXBvcnQgRXh0cmFjdFRleHRQbHVnaW4gZnJvbSAnZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luJztcbmltcG9ydCBBc3NldHNXZWJwYWNrUGx1Z2luIGZyb20gJ2Fzc2V0cy13ZWJwYWNrLXBsdWdpbic7XG5pbXBvcnQgQ29weVBsdWdpbiBmcm9tICdjb3B5LXdlYnBhY2stcGx1Z2luJztcbmltcG9ydCB7IGpzTG9hZGVyLCBjc3NMb2FkZXIgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWwnO1xuaW1wb3J0IGNvbmZpZyBmcm9tICcuLi9jb25maWcnO1xuXG5jb25zdCB7IHNyY0RpciwgYmFzZURpciwgYnVpbGREaXIsIGJhYmVsbHJjLCBicm93c2Vyc2xpc3QsIGlzRGVidWcgfSA9IGNvbmZpZztcbmNvbnN0IGFzc2V0c1BsdWdpbiA9IG5ldyBBc3NldHNXZWJwYWNrUGx1Z2luKHtcbiAgZmlsZW5hbWU6ICdhc3NldHMuanNvbicsXG4gIHBhdGg6IGJ1aWxkRGlyLFxuICBwcmV0dHlQcmludDogdHJ1ZSxcbiAgdXBkYXRlOiB0cnVlLFxufSk7XG5jb25zdCBjb3B5UGx1Z2luID0gbmV3IENvcHlQbHVnaW4oW3sgZnJvbTogcGF0aC5qb2luKGJhc2VEaXIsICdwdWJsaWMnKSwgdG86IHBhdGguam9pbihidWlsZERpciwgJ3B1YmxpYycpIH1dKTtcbmNvbnN0IHsgcHJlc2V0cywgcGx1Z2lucyB9ID0gYmFiZWxscmM7XG5jb25zdCBqc1J1bGVzID0ganNMb2FkZXIoe1xuICBvcHRpb25zOiB7XG4gICAgcHJlc2V0czogW1xuICAgICAgW1wiQGJhYmVsL3ByZXNldC1lbnZcIiwge1xuICAgICAgICBcInRhcmdldHNcIjogYnJvd3NlcnNsaXN0LFxuICAgICAgfV0sXG4gICAgICAuLi4ocHJlc2V0cyB8fCBbXSkuc2xpY2UoMSksXG4gICAgXSxcbiAgICBwbHVnaW5zOiBbXG4gICAgICAuLi4ocGx1Z2lucyB8fCBbXSksXG4gICAgXSxcbiAgfVxufSk7XG5cbmNvbnN0IGV4dHJhY3RMZXNzID0gbmV3IEV4dHJhY3RUZXh0UGx1Z2luKGBzdHlsZVNoZWV0L1tuYW1lXWxlc3MuW2hhc2g6OF0uY3NzYCk7XG5jb25zdCBleHRyYWN0U2NzcyA9IG5ldyBFeHRyYWN0VGV4dFBsdWdpbihgc3R5bGVTaGVldC9bbmFtZV1zY3NzLltoYXNoOjhdLmNzc2ApO1xuY29uc3QgY3NzUnVsZXMgPSBjc3NMb2FkZXIoe30sIGlzRGVidWcpO1xuXG5leHBvcnQgZGVmYXVsdCAoKTogQ29uZmlndXJhdGlvbiA9PiAoe1xuICBjb250ZXh0OiBiYXNlRGlyLFxuICB0YXJnZXQ6ICd3ZWInLFxuICBlbnRyeToge1xuICAgIG1haW46IHBhdGgucmVzb2x2ZShzcmNEaXIsICdhcHAvbWFpbi50cycpLFxuICB9LFxuICBvdXRwdXQ6IHtcbiAgICBwdWJsaWNQYXRoOiAnJyxcbiAgICBwYXRoOiBwYXRoLmpvaW4oYnVpbGREaXIsICdwdWJsaWMnKSxcbiAgICBjaHVua0ZpbGVuYW1lOiBgY2hlY2svW25hbWVdLltjaHVua2hhc2g6OF0uanNgLFxuICAgIGZpbGVuYW1lOiBgamF2YXNjcmlwdC9bbmFtZV0uW2hhc2g6OF0uanNgLFxuICB9LFxuICByZXNvbHZlOiB7XG4gICAgbW9kdWxlczogW3BhdGgucmVzb2x2ZShiYXNlRGlyLCAnbm9kZV9tb2R1bGVzJyksIHBhdGgucmVsYXRpdmUoYmFzZURpciwgJ3NyYycpXSxcbiAgICBleHRlbnNpb25zOiBbJy5qcycsICcudHMnXSxcbiAgfSxcbiAgbW9kdWxlOiB7XG4gICAgcnVsZXM6IFtcbiAgICAgIGpzUnVsZXMuYmFiZWwoe30pLFxuICAgICAganNSdWxlcy50cyh7fSksXG4gICAgICBjc3NSdWxlcy5sZXNzKHt9LCBleHRyYWN0TGVzcyksXG4gICAgICBjc3NSdWxlcy5zYXNzKHt9LCBleHRyYWN0U2NzcyksXG4gICAgXSxcbiAgfSxcbiAgcGx1Z2luczogW1xuICAgIGNvcHlQbHVnaW4sXG4gICAgZXh0cmFjdExlc3MsXG4gICAgZXh0cmFjdFNjc3MsXG4gICAgbmV3IFByb2dyZXNzUGx1Z2luKCksXG4gICAgYXNzZXRzUGx1Z2luLFxuICBdLFxuICBzdGF0czoge1xuICAgIGNvbG9yczogdHJ1ZSxcbiAgICB0aW1pbmdzOiB0cnVlLFxuICB9LFxufSk7XG4iXX0=